using System;

class Program{
    static void Main() {
         Game game = new Game();
         game.GameLoop();
      //Player player = new Player();  
        //Console.WriteLine("==================================================");
        //Enemy enemy = new Enemy();
         
    }
}

class Game{
    bool isGameExited = false;
    Player player;
    Enemy enemy;
    
    private void SpawnCharacters(){
        player = new Player();
        enemy = new Enemy();
    }
    private void DisplayGameStory(){
          Console.WriteLine("\n==================================================");
        Console.WriteLine("             üçïMidnight Pizza Fightüçï");
        Console.WriteLine("==================================================");
        Console.WriteLine("  In a bustling pizzeria on a busy Friday night...");
        Console.WriteLine("--------------------------------------------------");
        Console.WriteLine("  You, the Dough Master, created your magnum opus-");
        Console.WriteLine(" the perfect pizza. Suddenly, a sneaky Crust Bandit");
        Console.WriteLine(" snatches your masterpiece!");
        Console.WriteLine("--------------------------------------------------");
        Console.WriteLine(" Fueled by passion for your craft, you give chase...");
        Console.WriteLine("Through winding alleys and crowded streets, you");
        Console.WriteLine("pursue the pizza pilferer. Finally, the thief is");
        Console.WriteLine("cornered in a dead-end alley. It's time to recover");
        Console.WriteLine("your stolen slice!");
        Console.WriteLine("--------------------------------------------------");
        Console.WriteLine("                     FIGHT!");
        
    }
    private void ProcessBattleInput(){
        string playerChoice = GetInput();
        Console.Clear();
        
        switch (playerChoice){
     
    case "A":
        PlayerAttack();
        if (CheckGameOver())
        break;
        EnemyAttack();
        if (CheckGameOver())
        break;
        DisplayCharacterStats();
        break;
    case "H":
        PlayerHeal();
        if (CheckGameOver())
        break;
        EnemyAttack();
        if (CheckGameOver())
        break;
        DisplayCharacterStats();
            
        break;
    
    default:
        InvalidInput();
        break;
        }
    }
    public void ProcessBattleLoop(){
        do {
        ShowBattleOptions();
        ProcessBattleInput();
        }
        while (AreCharactersAlive());
    }

    private void ShowBattleOptions(){
        Console.WriteLine("\n==================================================");
        Console.WriteLine("             üçï PIZZA BATTLE OPTIONS üçï             ");
        Console.WriteLine("==================================================");
        Console.WriteLine(" [A] Attack the Crust Bandit ü•ä");
        Console.WriteLine(" [H] Gulp an Espresso Shot ");
        Console.WriteLine("==================================================");
        Console.WriteLine("  Your choice: ");
    }
    private string GetInput(){
        string input = Console.ReadLine();
        return input.ToUpper();
    }
    private void PlayerAttack(){
            int totalDamage =   player.CalculateTotalDamage();
            enemy.TakeDamage(totalDamage);
            player.ShowAttackDamage(totalDamage);
            

    }
    private void PlayerHeal(){
        int totalHeal = player.CalculateTotalHeal();
        player.Heal(totalHeal);
        player.ShowHeal(totalHeal);
    }
    private void EnemyAttack(){
        int totalDamage = enemy.CalculateTotalDamage();
        player.TakeDamage(totalDamage);
            enemy.ShowAttackDamage(totalDamage);
    }
    private void DisplayCharacterStats(){
        player.DisplayCharacterStats();
        enemy.DisplayEnemyStats();
    }
    private bool CheckGameOver(){
        if (enemy.Health <= 0){
            ShowGameWin();
            return true;
        }
        if (player.Health <= 0){
            ShowGameLose();
            return true;
        }
        return false;
        
    }
    private void ShowGameWin() {
    Console.Clear();
    Console.WriteLine("==================================================");
    Console.WriteLine("         üéâ PIZZA JUSTICE SERVED! üéâ");
    Console.WriteLine("==================================================");
    Console.WriteLine("The Dough Master has defeated the Crust Bandit!");
    Console.WriteLine("--------------------------------------------------");
    Console.WriteLine("The perfect pizza has been reclaimed üçï ");
    Console.WriteLine("The honor of Italian cuisine is restored!");
    Console.WriteLine("--------------------------------------------------");
    Console.WriteLine("Bon app√©tit, and thanks for playing! üë®üç≥");
    Console.WriteLine("==================================================");
}

    private void ShowGameLose(){
            Console.Clear();
            Console.WriteLine("==================================================");
            Console.WriteLine("         üò≠ PIZZA TRAGEDY! üò≠ ");
            Console.WriteLine("==================================================");
            Console.WriteLine("The Dough Master has been outmaneuvered! ");
            Console.WriteLine("--------------------------------------------------");
            Console.WriteLine("The Crust Bandit escapes with your masterpiece üèÉ‚Äç‚ôÇÔ∏è ");
            Console.WriteLine("Your pizzeria's reputation is in shambles üìâ");
            Console.WriteLine("--------------------------------------------------");
            Console.WriteLine(" Thanks for your valiant effort! üéñÔ∏è");
            Console.WriteLine("   Perhaps it's time to switch to calzones... ü•üÔ∏è");
            Console.WriteLine("==================================================");
}
    
    private void InvalidInput(){
        Console.WriteLine("Invalid Input! , please give a valid input");    
    }
    private bool AreCharactersAlive() => player.Helath <= 0 && enemy.Health <= 0;
            
     public void GameLoop()
    {
        while (!isGameExited)
        {
            DisplayGameStory();
            StartMenu();
            if (!isGameExited)
                RestartMenu();
        }
    }  
    
    private void StartMenu(){
        Console.WriteLine("==================================================");
        Console.WriteLine("  Press S to Get Your Masterpiece BACK...");
        Console.WriteLine("Press any other key to exit the game   ");
        Console.WriteLine("==================================================");
        ProcessStartMenuInput();
    }
    private void ProcessStartMenuInput(){
        string startGame = GetInput();
        
        if (startGame == "S")
        {
            Console.Clear();
            SpawnCharacters();
            ProcessBattleInput();
         }
         else{
             ExitGame();
         }
       }
    private void ExitGame(){
            Console.Clear();
           isGameExited == true;
          Console.WriteLine("Thanks for playing Midnight Pizza Fight!üòÑ");
           
    }
       private void RestartMenu(){
           Console.WriteLine("\n==================================================");
           Console.WriteLine("     Press R to Restart...     ");
           Console.WriteLine("     Press any other key to exit the game   ");
           Console.WriteLine("==================================================");

        ProcessRestartMenuInput();
       }
       private void ProcessRestartMenuInput(){
           string restartGame = GetInput();
           if(restartGame == "R"){
              isGameExited = false;
           }
            else{
             ExitGame();
         }
       }
}
class Player {
    private int Health = 100;
    private int MaxHealth = 100;
    private int AttackDamage = 20;
    private int HealingCapacity = 15;
    public int health;
    public int CalculateTotalDamage(){
        int additionalDamage = generateRandomNumberInRange(5,15);
        int totalDamage = additionalDamage + AttackDamage;
        return totalDamage;
    }

//public int health {
  //      get { return Health; }
    //}

    private void SpawnPlayer() {
        Console.WriteLine("                  Here, I come!");
    }

    public int CalculateTotalHeal(){
        int additionalHeal = generateRandomNumberInRange(10, 18);
        int totalHeal = HealingCapacity + additionalHeal;
        return totalHeal;
    }
    public Player() {
        SpawnPlayer();
    }
    
    private int generateRandomNumberInRange(int min, int max){
    Random rand = new Random();
    int randomNumber = rand.Next(min, max+1);
    return randomNumber;
    }
    
    public void ShowattackDamage(int totalDamage){
        Console.WriteLine("Dough Master's attack dealt : ");
    }
    public void takeDamage(int DamageReceived) => Health -= DamageReceived;
    
    
    public void Heal(int healAmount) {
        health += healAmount;
        if (health > MaxHealth) health = MaxHealth;
    }
    
    public void ShowHeal(int healAmount){
        if (health >= MaxHealth){
        Console.WriteLine("             üçï PIZZA BATTLE üçï                  ");
            Console.WriteLine("============================================");
            Console.WriteLine("     Dough Master is bursting with energy! üöÄ    ");
            Console.WriteLine("--------------------------------------------");
    }
    else {
        Console.WriteLine("             üçï PIZZA BATTLE üçï                  ");
            Console.WriteLine("============================================");
           Console.WriteLine("Dough Master's heal restored " + healAmount + " hp! ‚òï");
            Console.WriteLine("--------------------------------------------");
        }
        
    }
  public void DisplayPlayerStats() {
    Console.WriteLine("\n---------------------------------------------------");
    Console.WriteLine("              DOUGH MASTER'S STATS                ");
    Console.WriteLine("---------------------------------------------------");
    Console.WriteLine("Health: " + Health + "/" + MaxHealth); // Use MaxHealth
    Console.WriteLine("Dough Slapper: " + AttackDamage); // Use AttackDamage
    Console.WriteLine("Espresso Shot ‚òï: " + HealingCapacity); // Use HealingCapacity
    Console.WriteLine("Dough Slapper Boost üå™Ô∏è: 5 to 15");
    Console.WriteLine("Espresso Shot Boost ‚òï: 10 to 20");
}




}
class Enemy{
    
    private int health = 150;
    private int attackDamage = 15;
    private int maxHealth = 150;
    private int healingCapacity = 20;
    //public int Health{
      //  get{ return health;}
    //}
     public int Health => health;
    private void SpawnEnemy(){
        Console.WriteLine("  ü¶π CRUST BANDIT: NEMESIS OF ITALIAN CUISINE ü¶π");
        Console.WriteLine("==================================================");
        Console.WriteLine("You'll never catch me, flour face!");
    }
    
    private int generateRandomNumberInRange(int min, int max){
    Random rand = new Random();
    int randomNumber = rand.Next(min, max+1);
    return randomNumber;
    }
    
    public int CalculateTotalDamage(){
        int additionalDamage = generateRandomNumberInRange(5,15);
        int totalDamage = additionalDamage + attackDamage;
        return totalDamage;
    }

    
    public void takeDamage(int DamageReceived) => health -= DamageReceived;
    
    public Enemy(){
        SpawnEnemy();
    }
     public void ShowAttackDamage(int totalDamage){
        Console.WriteLine("Dough Master's attack dealt : ");
    }
     public void DisplayEnemyStats() {
        Console.WriteLine("\n---------------------------------------------------");
        Console.WriteLine("              DOUGH MASTER'S STATS                ");
        Console.WriteLine("---------------------------------------------------");
        Console.WriteLine("Health: " + Health + "/" + maxHealth);
        Console.WriteLine("Dough Slapper: " + attackDamage);
        Console.WriteLine("Espresso Shot ‚òï: " + healingCapacity);
        Console.WriteLine("Dough Slapper Boost üå™Ô∏è: 5 to 15");
        Console.WriteLine("Espresso Shot Boost ‚òï: 10 to 20");
    }
}
